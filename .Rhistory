g <- g + geom_line(size = 1, aes(colour = ID)) + geom_point(size =10, pch = 21, fill = "salmon", alpha = .5)
g
library(reshape2)
?dcast
#Air quality example
names(airquality) <- tolower(names(airquality))
aqm <- melt(airquality, id=c("month", "day"), na.rm=TRUE)
acast(aqm, day ~ month ~ variable)
acast(aqm, month ~ variable, mean)
acast(aqm, month ~ variable, mean, margins = TRUE)
dcast(aqm, month ~ variable, mean, margins = c("month", "variable")
)
acast(aqm, month ~ variable, mean)
# Chickweight data
library(datasets)
data("ChickWeight")
library(reshape2)
##define weight gain or loss
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
# rename
names(wideCW)[-(1 : 2)] <- paste("time", names(wideCW)[-(1 : 2)], sep = "")
library(dplyr)
wideCW <- mutate(wideCW, gain = time21 - time0)
# Plotting the raw data
g <- ggplot(ChickWeight, aes(x = Time, y = weight,
colour = Diet, group = Chick))
g <- g + geom_line()
g <- g + stat_summary(aes(group = 1), geom = "line", fun.y = mean, size = 1, col = "black")
g <- g + facet_grid(. ~ Diet)
g
# Plotting the raw data
g <- ggplot(ChickWeight, aes(x = Time, y = weight,
colour = Diet, group = Chick))
g <- g + geom_line()
g <- g + stat_summary(aes(group = 1), geom = "line", fun.y = mean, size = 1, col = "black")
g <- g + facet_grid(. ~ Diet)
g
# Weight gain by diet
g <- ggplot(wideCW, aes(x = factor(Diet), y = gain, fill = factor(Diet)))
g <- g + geom_violin(col = "black", size = 2)
g
g <- ggplot(ChickWeight, aes(x = Time, y = weight,
colour = Diet, group = Chick))
g <- g + geom_line()
g <- g + stat_summary(aes(group = "Chick"), geom = "line", fun.y = mean, size = 1, col = "black")
g <- g + facet_grid(. ~ Diet)
g
# Plotting the raw data
g <- ggplot(ChickWeight, aes(x = Time, y = weight,
colour = Diet, group = Chick))
g <- g + geom_line()
g <- g + stat_summary(aes(group = Chick), geom = "line", fun.y = mean, size = 1, col = "black")
g <- g + facet_grid(. ~ Diet)
g
g <- ggplot(ChickWeight, aes(x = Time, y = weight,
colour = Diet, group = Chick))
g <- g + geom_line()
g <- g + stat_summary(aes(group = "Chick"), geom = "line", fun.y = mean, size = 1, col = "black")
g <- g + facet_grid(. ~ Diet)
g
# Weight gain by diet
g <- ggplot(wideCW, aes(x = factor(Diet), y = gain, fill = factor(Diet)))
g <- g + geom_violin(col = "black", size = 2)
g
?stat_summary
g <- ggplot(ChickWeight, aes(x = Time, y = weight,
colour = Diet, group = Chick))
g <- g + geom_line()
g
g <- ggplot(ChickWeight, aes(x = Time, y = weight,
colour = Diet, group = Chick))
g <- g + geom_line()
g <- g + stat_summary(aes(group = Chick), geom = "line", fun.y = mean, size = 1, col = "black")
g
g <- ggplot(ChickWeight, aes(x = Time, y = weight,
colour = Diet, group = Chick))
g <- g + geom_line()
g <- g + stat_summary(aes(Chick), geom = "line", fun.y = mean, size = 1, col = "black")
g <- g + facet_grid(. ~ Diet)
g
# Plotting the raw data
g <- ggplot(ChickWeight, aes(x = Time, y = weight,
colour = Diet, group = Chick))
g <- g + geom_line()
g <- g + stat_summary(aes(group = 1), geom = "line", fun.y = mean, size = 1, col = "black")
g <- g + facet_grid(. ~ Diet)
g
# Plotting the raw data
g <- ggplot(ChickWeight, aes(x = Time, y = weight,
colour = Diet, group = Chick))
g <- g + geom_line()
g <- g + stat_summary(aes(Chick), geom = "line", fun.y = mean, size = 1, col = "black")
g <- g + facet_grid(. ~ Diet)
g
g <- ggplot(ChickWeight, aes(x = Time, y = weight,
colour = Diet, group = Chick))
g <- g + geom_line()
g <- g + stat_summary(aes(group = "Chick"), geom = "line", fun.y = mean, size = 1, col = "black")
g <- g + facet_grid(. ~ Diet)
g
g <- ggplot(ChickWeight, aes(x = Time, y = weight,
colour = Diet, group = Chick))
g <- g + geom_line()
g <- g + stat_summary(geom = "line", fun.y = mean, size = 1, col = "black")
g <- g + facet_grid(. ~ Diet)
g
g <- ggplot(ChickWeight, aes(x = Time, y = weight, colour = Diet, group = Chick))
g <- g + geom_line()
g
g <- ggplot(ChickWeight, aes(x = Time, y = weight, colour = Diet, group = Chick))
g <- g + geom_line()
g <- g + stat_summary(aes(group = 1), geom = "line", fun.y = mean, size = 1, col = "black")
g
g <- ggplot(ChickWeight, aes(x = Time, y = weight, colour = Diet, group = Chick))
g <- g + geom_line()
g <- g + stat_summary(aes(weight), geom = "line", fun.y = mean, size = 1, col = "black")
g <- g + facet_grid(. ~ Diet)
g
wideCW14 <- subset(wideCW, Diet %in% c(1, 4))
rbind(
t.test(gain ~ Diet, paired = FALSE, var.equal = TRUE, data = wideCW14)$conf,
t.test(gain ~ Diet, paired = FALSE, var.equal = FALSE, data = wideCW14)$conf
)
# T test in R and hypothesis testing
library(UsingR)
data(father.son)
t.test(father.son$sheight - father.son$fheight)
summary(father.son)
libray(dplyr)
library(dplyr)
glimpse(father.son)
# Using the chickweight dataset
# Chickweight data
library(datasets)
data("ChickWeight")
library(reshape2)
##define weight gain or loss
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
# rename
names(wideCW)[-(1 : 2)] <- paste("time", names(wideCW)[-(1 : 2)], sep = "")
library(dplyr)
wideCW <- mutate(wideCW, gain = time21 - time0)
# Unequal variance T test comparing diets 1 and 4
wideCW14 <- subset(wideCW, Diet %in% c(1, 4))
t.test(gain ~ Diet, paired = FALSE, var.equal = TRUE, data = wideCW14)
?t.test
qt(0.975)
qt(0.975, 8)
1100 + 30 * 2.306004
1100 - 30 * 2.306004
t.test(3, 5)
qt(0.95, 8)
1100 - 30 * 1.859548
1100 * 30 * 1.859548
1100 + 30 * 1.859548
1100 + c(-1, 1) * qt(0.975, 9 - 1) * 10 / sqrt(9)
3 + c(-1, 1) * qt(0.975, 10 - 1) * 0.6 / sqrt(10)
new <- 3 + c(-1, 1) * qt(0.975, 10 - 1) * 0.6 / sqrt(10)
new
old <- 5 + c(-1, 1) * qt(0.975, 10 - 1) * 0.68 / sqrt(10)
old
new - old
old <- 5 + c(-1, 1) * qt(0.95, 10 - 1) * 0.68 / sqrt(10)
new <- 3 + c(-1, 1) * qt(0.95, 10 - 1) * 0.6 / sqrt(10)
new - old
new <- -3 + c(-1, 1) * qt(0.95, 9 - 1) * 1.5 / sqrt(9)
old <- 1 + c(-1, 1) * qt(0.95, 9 - 1) * 1.8 / sqrt(9)
new
old
new - old
pt(2.5, 15, lower.tail = FALSE)
choose(8, 7) * 0.5^8 + choose(8, 8) * 0.5^8
pbinom(6, size = 8, prob = 0.5, lower.tail = FALSE)
ppois(9, 5, lower.tail = FALSE)
library(swirl)
swirl()
myplot(2)
myplot(20)
myplot2(2)
qt(0.975, 2)
myplot2(20)
sleep
range(g1)
range(g2)
g1 - g2
difference <- g2 - g1
mean(difference)
sd(difference)
s <- sd(difference)
mn + c(-1, 1) * qt(0.975, 19) * s / sqrt(10)
mn + c(-1, 1) * qt(0.975, 9) * s / sqrt(10)
t.test(difference)$conf.int
(8 - 1)* 15.34^2 + (21 -1)*18.23^2
sp <- (8 - 1)* 15.34^2 + (21 -1)*18.23^2
ns <-  8 + 21 -2
sp <- sqrt(sp / ns)
(132.86 - 127.44) + c(-1, 1) * qt(0.975, ns) * sp *sqrt(1/8 + 1/21)
132.86 - 127.44 + c(-1, 1) * qt(0.975, ns) * sp *sqrt(1/8 + 1/21)
var(g1)
sp <- sqrt((9*var(g1)+9*var(g2))/18
)
md + c(-1, 1) * qt(0.975, 18) * sp *sqrt(1/9 + 1/9)
md + c(-1, 1) * qt(0.975, 18) * sp *sqrt(1/5)
t.test(g2, g1, paired = FALSE, var.equal = TRUE)
t.test(g2, g1, paired = FALSE, var.equal = TRUE)$conf
t.test(g2, g1, paired = TRUE, var.equal = TRUE)$conf
t.test(g2, g1, paired = TRUE)$conf
num <- (15.34)^2 / 8 + (18.23)^2 / 21
num <- (15.34^2 / 8 + 18.23^2 / 21)^2
den <- (15.34^4/8^2/7) + (18.23^4/21^2/20)
mydf <- num/den
132.86-127.44 + C(-1,1) * qt(0.975, mydf) * sqrt(15.34^/8 + 18.23^2/21)
132.86-127.44 + C(-1,1) * qt(0.975, mydf) * sqrt(15.34^2/8 + 18.23^2/21)
132.86-127.44 + qt(0.975, mydf) * sqrt(15.34^2/8 + 18.23^2/21)
132.86-127.44 + c(-1, 1) * qt(0.975, mydf) * sqrt(15.34^2/8 + 18.23^2/21)
library(swirl)
Pierre
swirl()
0.1
1
(32-30)
(32-30)/(10/sqrt(16))
15
qt(0.95, 15)
dim(fs)
t.test(fs$sheight, fs$fheight, paired = TRUE)
11.7885 * sd(fs$sheight-fs$fheight)/sqrt(1078)
mybin
8
pt(q = 2.5, df = 15, lower.tail = FALSE)
qt(0.95)
qnorm(0.95)
qnorm(0.99)
pnorm(2, lower.tail = TRUE)
pnorm(2, lower.tail = FALSE)
mubin
mybin
pbinom(6, size = 8, prob = 0.5, lower.tail = FALSE)
pbinom(6, size = 8, prob = 0.5, lower.tail = TRUE)
pbinom(7, size = 8, prob = 0.5, lower.tail = TRUE)
ppois(9, lambda = 5, lower.tail = FALSE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(manipulate)
mu0 <- 30
myplot <- function(sigma, mua, n, alpha){
g = ggplot(data.frame(mu = c(27, 36)), aes(x = mu))
g = g + stat_function(fun=dnorm, geom = "line",
args = list(mean = mu0, sd = sigma / sqrt(n)),
size = 2, col = "red")
g = g + stat_function(fun=dnorm, geom = "line",
args = list(mean = mua, sd = sigma / sqrt(n)),
size = 2, col = "blue")
xitc = mu0 + qnorm(1 - alpha) * sigma / sqrt(n)
g = g + geom_vline(xintercept=xitc, size = 3)
g
}
manipulate(
myplot(sigma, mua, n, alpha),
sigma = slider(1, 10, step = 1, initial = 4),
mua = slider(30, 35, step = 1, initial = 32),
n = slider(1, 50, step = 1, initial = 16),
alpha = slider(0.01, 0.1, step = 0.01, initial = 0.05)
)
power.t.test(n = 16, delta = 2 / 4, sd=1, type = "one.sample",  alt = "one.sided")$power
power.t.test(n = 16, delta = 2, sd=4, type = "one.sample",  alt = "one.sided")$power
power.t.test(n = 16, delta = 100, sd=200, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 2 / 4, sd=1, type = "one.sample",  alt = "one.sided")
power.t.test(n = 16, delta = 2, sd=4, type = "one.sample",  alt = "one.sided")
power.t.test(n = 16, delta = 100, sd=200, type = "one.sample", alt = "one.sided")
power.t.test(power = .8, delta = 2 / 4, sd=1, type = "one.sample",  alt = "one.sided")$n
power.t.test(power = .8, delta = 2, sd=4, type = "one.sample",  alt = "one.sided")$n
power.t.test(power = .8, delta = 100, sd=200, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 2 / 4, sd=1, type = "one.sample",  alt = "one.sided")
power.t.test(power = .8, delta = 2, sd=4, type = "one.sample",  alt = "one.sided")
power.t.test(power = .8, delta = 100, sd=200, type = "one.sample", alt = "one.sided")
power.t.test(power = .8, n = 4, sd=1, type = "one.sample",  alt = "one.sided")$delta
power.t.test(power = .8, n = 8, sd=4, type = "one.sample",  alt = "one.sided")$delta
power.t.test(power = .8, n = 16, sd=200, type = "one.sample", alt = "one.sided")$delta
power.t.test(power = .8, n = 10, sd=1, type = "one.sample",  alt = "one.sided")$delta
power.t.test(power = .8, n = 20, sd=4, type = "one.sample",  alt = "one.sided")$delta
power.t.test(power = .8, n = 30, sd=200, type = "one.sample", alt = "one.sided")$delta
power.t.test(power = .8, n = 20, sd=1, type = "one.sample",  alt = "one.sided")$delta
power.t.test(power = .8, n = 40, sd=4, type = "one.sample",  alt = "one.sided")$delta
power.t.test(power = .8, n = 50, sd=200, type = "one.sample", alt = "one.sided")$delta
power.t.test(power = .8, n = 2, sd=1, type = "one.sample",  alt = "one.sided")$delta
power.t.test(power = .8, n = 5, sd=4, type = "one.sample",  alt = "one.sided")$delta
power.t.test(power = .8, n = 10, sd=200, type = "one.sample", alt = "one.sided")$delta
power.t.test(power = .8, n = 1, sd=1, type = "one.sample",  alt = "one.sided")$delta
power.t.test(power = .8, n = 2, sd=4, type = "one.sample",  alt = "one.sided")$delta
power.t.test(power = .8, n = 3, sd=200, type = "one.sample", alt = "one.sided")$delta
power.t.test(power = .8, n = 2, sd=1, type = "one.sample",  alt = "one.sided")$delta
power.t.test(power = .8, n = 3, sd=4, type = "one.sample",  alt = "one.sided")$delta
power.t.test(power = .8, n = 4, sd=200, type = "one.sample", alt = "one.sided")$delta
power.t.test(n = 16, delta = 2 / 4, sd=1, type = "one.sample",  alt = "one.sided")$power
power.t.test(n = 16, delta = 2, sd=4, type = "one.sample",  alt = "one.sided")$power
power.t.test(n = 16, delta = 100, sd=200, type = "one.sample", alt = "one.sided")$power
power.t.test(power = .8, n = 18, sd=1, type = "one.sample",  alt = "one.sided")$delta
power.t.test(power = .8, n = 20, sd=4, type = "one.sample",  alt = "one.sided")$delta
power.t.test(power = .8, n = 22, sd=200, type = "one.sample", alt = "one.sided")$delta
power.t.test(n = 16, delta = 2 / 4, sd=1, type = "one.sample",  alt = "one.sided")
power.t.test(n = 16, delta = 2, sd=4, type = "one.sample",  alt = "one.sided")
power.t.test(n = 16, delta = 100, sd=200, type = "one.sample", alt = "one.sided")
power.t.test(power = .8, n = 100, sd=1, type = "one.sample",  alt = "one.sided")$delta
power.t.test(power = .8, n = 200, sd=4, type = "one.sample",  alt = "one.sided")$delta
power.t.test(power = .8, n = 400, sd=200, type = "one.sample", alt = "one.sided")$delta
power.t.test(power = .8, n = 500, sd=1, type = "one.sample",  alt = "one.sided")$delta
power.t.test(power = .8, n = 800, sd=4, type = "one.sample",  alt = "one.sided")$delta
power.t.test(power = .8, n = 1000, sd=200, type = "one.sample", alt = "one.sided")$delta
power.t.test(power = .8, n = 200, sd=1, type = "one.sample",  alt = "one.sided")$delta
power.t.test(power = .8, n = 80, sd=4, type = "one.sample",  alt = "one.sided")$delta
power.t.test(power = .8, n = 100, sd=200, type = "one.sample", alt = "one.sided")$delta
?power.t.test
power.t.test(n = 200, power = .8, sd=1, type = "one.sample",  alt = "one.sided")$delta
power.t.test(power = .8, n = 200, sd=4, type = "one.sample",  alt = "one.sided")$delta
power.t.test(power = .8, n = 100, sd=200, type = "one.sample", alt = "one.sided")$delta
power.t.test(n = 200, power = .8, sd=1, type = "one.sample",  alt = "one.sided")$delta
power.t.test(n = 200, power = .8, sd=1, type = "one.sample",  alt = "one.sided")$delta
power.t.test(n = 200, power = .8, sd=1, type = "one.sample",  alt = "one.sided")$delta
power.t.test(power = .8, n = 200, sd=4, type = "one.sample",  alt = "one.sided")$delta
power.t.test(power = .8, n = 200, sd=4, type = "one.sample",  alt = "one.sided")$delta
power.t.test(n = 200, power = .8, sd=1, type = "one.sample",  alt = "one.sided")
power.t.test(n = 200, power = .8, sd=1, type = "one.sample",  alt = "one.sided")
power.t.test(power = .8, n = 200, sd=1, type = "one.sample",  alt = "one.sided")
power.t.test(n = 20, power = .8, sd=1, type = "one.sample",  alt = "one.sided")
power.t.test(n = 30, power = .8, sd=4, type = "one.sample",  alt = "one.sided")
power.t.test(n = 50, power = .8, sd=200, type = "one.sample", alt = "one.sided")
power.t.test(n = 20, power = .8, sd=1, type = "one.sample",  alt = "one.sided")$delta
power.t.test(n = 30, power = .8, sd=4, type = "one.sample",  alt = "one.sided")$delta
power.t.test(n = 50, power = .8, sd=200, type = "one.sample", alt = "one.sided")$delta
power.t.test(n = 20, power = .8, sd=1, type = "one.sample",  alt = "one.sided")$delta
power.t.test(n = 16, power = .8, sd=4, type = "one.sample",  alt = "one.sided")$delta
power.t.test(n = 10, power = .8, sd=200, type = "one.sample", alt = "one.sided")$delta
power.t.test(n = 20, power = .8, sd=1, type = "one.sample",  alt = "one.sided")$delta
power.t.test(n = 160, power = .8, sd=4, type = "one.sample",  alt = "one.sided")$delta
power.t.test(n = 1000, power = .8, sd=200, type = "one.sample", alt = "one.sided")$delta
power.t.test(n = 100, power = .8, sd=1, type = "one.sample",  alt = "one.sided")$delta
power.t.test(n = 100, power = .8, sd=1, type = "one.sample",  alt = "one.sided")$delta
power.t.test(n = 160, power = .8, sd=4, type = "one.sample",  alt = "one.sided")$delta
power.t.test(n = 1000, power = .8, sd=200, type = "one.sample", alt = "one.sided")$delta
power.t.test(n = 10, power = .8, sd=1, type = "one.sample",  alt = "one.sided")$delta
power.t.test(n = 10, power = .8, sd=1, type = "one.sample",  alt = "one.sided")$delta
power.t.test(n = 200, power = .8, sd=4, type = "one.sample",  alt = "one.sided")$delta
power.t.test(n = 10000, power = .8, sd=200, type = "one.sample", alt = "one.sided")$delta
power.t.test(n = 10, power = .8, sd=1, type = "one.sample",  alt = "one.sided")$delta
power.t.test(n = 180, power = .8, sd=4, type = "one.sample",  alt = "one.sided")$delta
power.t.test(n = 100000, power = .8, sd=200, type = "one.sample", alt = "one.sided")$delta
power.t.test(n = 10, power = .8, sd=1, type = "one.sample",  alt = "one.sided")$delta
power.t.test(n = 160, power = .8, sd=4, type = "one.sample",  alt = "one.sided")$delta
power.t.test(n = 1000000, power = .8, sd=200, type = "one.sample", alt = "one.sided")$delta
power.t.test(n = 10, power = .8, sd=1, type = "one.sample",  alt = "one.sided")$delta
power.t.test(n = 150, power = .8, sd=4, type = "one.sample",  alt = "one.sided")$delta
power.t.test(n = 500000, power = .8, sd=200, type = "one.sample", alt = "one.sided")$delta
power.t.test(n = 10, power = .8, sd=1, type = "one.sample",  alt = "one.sided")$delta
power.t.test(n = 140, power = .8, sd=4, type = "one.sample",  alt = "one.sided")$delta
power.t.test(n = 300000, power = .8, sd=200, type = "one.sample", alt = "one.sided")$delta
power.t.test(n = 10, power = .8, sd=1, type = "one.sample",  alt = "one.sided")$delta
power.t.test(n = 130, power = .8, sd=4, type = "one.sample",  alt = "one.sided")$delta
power.t.test(n = 350000, power = .8, sd=200, type = "one.sample", alt = "one.sided")$delta
library(UsingR)
source('~/.active-rstudio-document', echo=TRUE)
library(manipulate)
myHist <- function(mu){
mse <- mean((galton$child - mu)^2)
g <- ggplot(galton, aes(x = child)) + geom_histogram(fill = "salmon", colour = "black", binwidth=1)
g <- g + geom_vline(xintercept = mu, size = 3)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2), sep = ""))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
install.packages("statisticalModeling")
library(statisticalModeling)
?gf_boxplot
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
set.seed(1010093)
pValues <- rep(NA, 1000)
for (i in 1:1000) {
x <- rnorm(20)
# First 500 beta=0, last 500 beta=2
if (i <= 500) {
y <- rnorm(20)
} else {
y <- rnorm(20, mean = 2 * x)
}
pValues[i] <- summary(lm(y ~ x))$coeff[2, 4]
}
trueStatus <- rep(c("zero", "not zero"), each = 500)
table(pValues < 0.05, trueStatus)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(UsingR)
data(father.son)
x <- father.son$sheight
n <- length(x)
B <- 10000
resamples <- matrix(sample(x,
n * B,
replace = TRUE),
B, n)
resampledMedians <- apply(resamples, 1, median)
hist(resampledMedians)
?hist
hist(resampledMedians, density = TRUE)
hist(resampledMedians, freq = TRUE)
g = ggplot(data.frame(medians = medians), aes(x = medians))
g = g + geom_histogram(color = "black", fill = "lightblue", binwidth = 0.05)
g
source('~/.active-rstudio-document', echo=TRUE)
B <- 10000
resamples <- matrix(sample(x,
n * B,
replace = TRUE),
B, n)
medians <- apply(resamples, 1, median)
sd(medians)
## [1] 0.08424
quantile(medians, c(.025, .975))
g = ggplot(data.frame(medians = medians), aes(x = medians))
g = g + geom_histogram(color = "black", fill = "lightblue", binwidth = 0.05)
g
B <- 10000
resamples <- matrix(sample(x,
n * B,
replace = TRUE),
B, n)
medians <- apply(resamples, 1, median)
sd(medians)
## [1] 0.08424
quantile(medians, c(.025, .975))
g = ggplot(data.frame(medians = medians), aes(x = medians))
g = g + geom_histogram(color = "black", fill = "lightblue", binwidth = 0.05)
g
## Permutations
subdata <- InsectSprays[InsectSprays$spray %in% c("B", "C"),]
y <- subdata$count
group <- as.character(subdata$spray)
testStat <- function(w, g) mean(w[g == "B"]) - mean(w[g == "C"])
observedStat <- testStat(y, group)
permutations <- sapply(1 : 10000, function(i) testStat(y, sample(group)))
observedStat
mean(permutations > observedStat)
bl <- c(140, 138, 150, 148, 135)
fu <- c(132, 135, 151, 146, 130)
t.test(fu, bl, alternative = "two.sided", paired = TRUE)
t.test(fu - bl, alternative = "two.sided")
-t.test(fu, bl, alternative = "less", paired = TRUE)
t.test(fu, bl, alternative = "less", paired = TRUE)
-(t.test(fu, bl, alternative = "less", paired = TRUE))
-1 * (t.test(fu, bl, alternative = "less", paired = TRUE))
bl <- c(140, 138, 150, 148, 135)
fu <- c(132, 135, 151, 146, 130)
t.test(fu, bl, alternative = "two.sided", paired = TRUE)
t.test(fu - bl, alternative = "two.sided")
-t.test(fu, bl, alternative = "less", paired = TRUE)
?t.test
-t.test(fu - bl, alternative = "less", paired = TRUE)
-t.test(fu - bl, alternative = "less")
t.test(fu, bl, alternative = "less", paired = TRUE)
1100 + c(-1, 1) * qt(0.975, 8) * 30/sqrt(9)
pbinom(2, size = 4, prob = 0.5, lower.tail = FALSE)
choose(4, 3) * 0.5^4 + choose(4, 4) * 0.5^4
pnorm(1.645 * 0.004, mean = 0.01, sd = 0.004, lower.tail = FALSE)
ceiling((4 * (qnorm(0.95) - qnorm(0.1)))^2)
?ceiling
4 * (qnorm(0.95) - qnorm(0.1)))^2
4 * (qnorm(0.95) - qnorm(0.1))^2
(4 * (qnorm(0.95) - qnorm(0.1)))^2
getwd()
setwd("D:/Data Science/R_Personal/TrainingMonitoring")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?read.csv
source('~/.active-rstudio-document', echo=TRUE)
FilePath <- paste(subdirSplit, Splitlist[i])
FilePath
source('~/.active-rstudio-document', echo=TRUE)
head(df)
FilePath
library(stringr)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?map
source('~/.active-rstudio-document', echo=TRUE)
head(Splitlist)
1:length(Splitlist)
source('~/.active-rstudio-document', echo=TRUE)
?name
?assign
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
summary(Importlist)
source('~/.active-rstudio-document', echo=TRUE)
summary(Importlist)
head(Importlist[1])
source('~/.active-rstudio-document', echo=TRUE)
Importlist
summary(Importlist)
